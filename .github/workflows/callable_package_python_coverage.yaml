# ----------------------------------------------------------------------
# |
# |  callable_package_python_coverage.yaml
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2024-01-29 17:59:31
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2024
# |  Distributed under the MIT License.
# |
# ----------------------------------------------------------------------
name: "[Callable] Package Python Code Coverage Data"
run-name: ${{ github.run_number }} [${{ github.actor }}] on ${{ github.ref_name }}

on:
  workflow_call:
    inputs:
      gist_id:
        required: false
        type: string

      gist_filename:
        required: false
        type: string
        default: covbadge.json

      coverage_target:
        required: false
        type: number
        description: |-
          The value can be in one of these formats:

            - A number between 1 and 100, which will be used as the target coverage percentage.
              For example, a value of 70.5 indicates that the coverage percentage must be >= 70.5%.

            - A number between 0 and 1, which will be used as the percentage of the current coverage percentage.
              For example, a value of 0.95 indicates that the coverage percentage must be >= 76% when
              the current coverage percentage is 80% (80% * 0.95 = 76%).

    secrets:
      GIST_TOKEN:
        required: false

jobs:
  package_coverage:
    name: Execute
    runs-on: ubuntu-latest

    env:
      COLUMNS: "200"
      SIMULATE_TERMINAL_CAPABILITIES_SUPPORTS_COLORS: "1"
      PYTHONIOENCODING: "UTF-8"

    permissions: {}

    steps:
      - name: "Checkout Source"
        uses: actions/checkout@v4

      - name: Download Coverage Data
        uses: actions/download-artifact@v4
        with:
          path: stage
          merge-multiple: true

      - name: Bootstrap
        shell: bash
        run: |
          ./Bootstrap.sh

      - name: Combine
        shell: bash
        run: |
          . ./Activate.sh

          cd stage

          if [[ -d tests ]]; then
            cd tests
          fi

          coverage combine .
          coverage report --ignore-errors --show-missing --skip-covered
          coverage json --ignore-errors -o .coverage.json

          export TOTAL=$(python -c "import json;print(json.load(open('.coverage.json'))['totals']['percent_covered_display'])")
          echo "coverage_total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

      - name: Validate Coverage Target
        if: ${{ inputs.gist_id && inputs.coverage_target }}
        shell: python
        run: |-
          import json
          import sys

          import requests

          coverage_target = ${{ inputs.coverage_target }}
          coverage_total = ${{ env.coverage_total }}

          if 0.0 <= coverage_target <= 1.0:
              response = requests.get(
                  "https://api.github.com/gists/${{ inputs.gist_id }}",
                  headers={"Authorization": f"token ${{ secrets.GIST_TOKEN }}"},
              )

              response.raise_for_status()
              response = response.json()

              prev_percentage = json.loads(response["files"]["${{ inputs.gist_filename }}"]["content"])

              prev_percentage = prev_percentage["message"]
              assert prev_percentage.endswith("%"), prev_percentage

              prev_percentage = float(prev_percentage[:-1])

              coverage_target *= prev_percentage

          elif 1.0 < coverage_target <= 100.0:
              pass
          else:
              sys.stdout.write(f"'{coverage_target}' is not a valid coverage target.\n")
              sys.exit(123)

          if coverage_total < coverage_target:
              sys.stdout.write(f"The coverage target of '{coverage_target}%' was not met (the coverage is '{coverage_total}%').\n")
              sys.exit(1)

          sys.stdout.write(f"The coverage target of '{coverage_target}%' was met (the coverage is '{coverage_total}%').\n")

      - name: Upload Coverage Data
        uses: actions/upload-artifact@v4
        with:
          name: ".coverage.all"
          path: "**/.coverage.json"

      - name: Make Coverage Badge
        if: ${{ inputs.gist_id && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ inputs.gist_id }}
          filename: ${{ inputs.gist_filename }}
          label: Coverage
          message: ${{ env.coverage_total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.coverage_total }}
